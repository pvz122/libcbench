#! /bin/bash

avai_vers=$(ls /opt/libcbench/glibc)
help_str="\
Usage: libcbench [--log] <executable_path>
       libcbench -l | -h
Arguments:
    -l: list available glibc versions
    -h: print this help message
    --log: log the output of the executable
"
declare -A statistics=()

# if no arguments are passed, print usage
if [ -z "$1" ]; then
    echo "${help_str}"
    exit 0
fi

# if -l is passed, list available glibc versions
if [ "$1" == "-l" ]; then
    echo "Available versions are:"
    echo ${avai_vers}
    exit 0
fi

# if -h is passed, print usage
if [ "$1" == "-h" ]; then
    echo "${help_str}"
    exit 0
fi

# if --log is passed, log the output of the executable
log_flag=0
if [ "$1" == "--log" ]; then
    shift
    log_flag=1
fi

# make a copy of the executable
exe_name=${1}
cp ${exe_name} ${exe_name}.libcbench
exe_path=$(realpath ${exe_name}.libcbench)

if [ $log_flag -eq 1 ]; then
    # create log file
    log_file=libcbench_$(date +%Y%m%d_%H%M%S).log
    touch ${log_file}
fi

# for each version, run `libcset executable_path version` and then run the executable
for version in $avai_vers; do
    /opt/libcbench/libcset ${exe_path} ${version}

    # print start running message
    now=$(date +%T\ %N)
    echo -e "\033[33m[$now] Running ${exe_name} using glibc ${version}\033[0m"
    if [ $log_flag -eq 1 ]; then
        echo -e "[$now] Running ${exe_name} using glibc ${version}" >>${log_file}
    fi

    # run the executable
    if [ $log_flag -eq 1 ]; then
        ${exe_path} 2>&1 | tee -a ${log_file}
        retv=${PIPESTATUS[0]}
    else
        ${exe_path}
        retv=$?
    fi

    # print exit code
    now=$(date +%T\ %N)
    if [ $retv -eq 0 ]; then
        statistics[$version]="Y"
        echo -e "\033[32m[${now}] Program exited with code ${retv}\033[0m \n"
    else
        statistics[$version]="N"
        echo -e "\033[31m[${now}] Program exited with code ${retv}\033[0m \n"
    fi
    if [ $log_flag -eq 1 ]; then
        echo -e "[$now] Program exited with code ${retv}" >>${log_file}
    fi
done

# rm the copy of the executable
rm ${exe_path}

# print done message
now=$(date +%T\ %N)
echo -e "\033[33m[$now] All done. \nThe results are below: (Version - Is Exited Normally)\033[0m"
if [ $log_flag -eq 1 ]; then
    echo -e "[$now] Results:" >>${log_file}
fi
for version in $avai_vers; do
    if [ ${statistics[$version]} == "Y" ]; then
        echo -e "\033[32m${version}\tY\033[0m"
    else
        echo -e "\033[31m${version}\tN\033[0m"
    fi
    if [ $log_flag -eq 1 ]; then
        echo -e "${version}\t${statistics[$version]}" >>${log_file}
    fi
done

if [ $log_flag -eq 1 ]; then
    now=$(date +%T\ %N)
    echo -e "\033[33m[$now] Log saves to ${log_file}\033[0m"
fi
